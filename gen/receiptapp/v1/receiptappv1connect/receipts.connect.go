// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: receiptapp/v1/receipts.proto

package receiptappv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chrnorm/build-your-own-cloudtrail/gen/receiptapp/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReceiptServiceName is the fully-qualified name of the ReceiptService service.
	ReceiptServiceName = "receiptapp.v1.ReceiptService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReceiptServiceListReceiptsProcedure is the fully-qualified name of the ReceiptService's
	// ListReceipts RPC.
	ReceiptServiceListReceiptsProcedure = "/receiptapp.v1.ReceiptService/ListReceipts"
	// ReceiptServiceGetReceiptDownloadURLProcedure is the fully-qualified name of the ReceiptService's
	// GetReceiptDownloadURL RPC.
	ReceiptServiceGetReceiptDownloadURLProcedure = "/receiptapp.v1.ReceiptService/GetReceiptDownloadURL"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	receiptServiceServiceDescriptor                     = v1.File_receiptapp_v1_receipts_proto.Services().ByName("ReceiptService")
	receiptServiceListReceiptsMethodDescriptor          = receiptServiceServiceDescriptor.Methods().ByName("ListReceipts")
	receiptServiceGetReceiptDownloadURLMethodDescriptor = receiptServiceServiceDescriptor.Methods().ByName("GetReceiptDownloadURL")
)

// ReceiptServiceClient is a client for the receiptapp.v1.ReceiptService service.
type ReceiptServiceClient interface {
	ListReceipts(context.Context, *connect.Request[v1.ListReceiptsRequest]) (*connect.Response[v1.ListReceiptsResponse], error)
	GetReceiptDownloadURL(context.Context, *connect.Request[v1.GetReceiptDownloadURLRequest]) (*connect.Response[v1.GetReceiptDownloadURLResponse], error)
}

// NewReceiptServiceClient constructs a client for the receiptapp.v1.ReceiptService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReceiptServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReceiptServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &receiptServiceClient{
		listReceipts: connect.NewClient[v1.ListReceiptsRequest, v1.ListReceiptsResponse](
			httpClient,
			baseURL+ReceiptServiceListReceiptsProcedure,
			connect.WithSchema(receiptServiceListReceiptsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getReceiptDownloadURL: connect.NewClient[v1.GetReceiptDownloadURLRequest, v1.GetReceiptDownloadURLResponse](
			httpClient,
			baseURL+ReceiptServiceGetReceiptDownloadURLProcedure,
			connect.WithSchema(receiptServiceGetReceiptDownloadURLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// receiptServiceClient implements ReceiptServiceClient.
type receiptServiceClient struct {
	listReceipts          *connect.Client[v1.ListReceiptsRequest, v1.ListReceiptsResponse]
	getReceiptDownloadURL *connect.Client[v1.GetReceiptDownloadURLRequest, v1.GetReceiptDownloadURLResponse]
}

// ListReceipts calls receiptapp.v1.ReceiptService.ListReceipts.
func (c *receiptServiceClient) ListReceipts(ctx context.Context, req *connect.Request[v1.ListReceiptsRequest]) (*connect.Response[v1.ListReceiptsResponse], error) {
	return c.listReceipts.CallUnary(ctx, req)
}

// GetReceiptDownloadURL calls receiptapp.v1.ReceiptService.GetReceiptDownloadURL.
func (c *receiptServiceClient) GetReceiptDownloadURL(ctx context.Context, req *connect.Request[v1.GetReceiptDownloadURLRequest]) (*connect.Response[v1.GetReceiptDownloadURLResponse], error) {
	return c.getReceiptDownloadURL.CallUnary(ctx, req)
}

// ReceiptServiceHandler is an implementation of the receiptapp.v1.ReceiptService service.
type ReceiptServiceHandler interface {
	ListReceipts(context.Context, *connect.Request[v1.ListReceiptsRequest]) (*connect.Response[v1.ListReceiptsResponse], error)
	GetReceiptDownloadURL(context.Context, *connect.Request[v1.GetReceiptDownloadURLRequest]) (*connect.Response[v1.GetReceiptDownloadURLResponse], error)
}

// NewReceiptServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReceiptServiceHandler(svc ReceiptServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	receiptServiceListReceiptsHandler := connect.NewUnaryHandler(
		ReceiptServiceListReceiptsProcedure,
		svc.ListReceipts,
		connect.WithSchema(receiptServiceListReceiptsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	receiptServiceGetReceiptDownloadURLHandler := connect.NewUnaryHandler(
		ReceiptServiceGetReceiptDownloadURLProcedure,
		svc.GetReceiptDownloadURL,
		connect.WithSchema(receiptServiceGetReceiptDownloadURLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/receiptapp.v1.ReceiptService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReceiptServiceListReceiptsProcedure:
			receiptServiceListReceiptsHandler.ServeHTTP(w, r)
		case ReceiptServiceGetReceiptDownloadURLProcedure:
			receiptServiceGetReceiptDownloadURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReceiptServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReceiptServiceHandler struct{}

func (UnimplementedReceiptServiceHandler) ListReceipts(context.Context, *connect.Request[v1.ListReceiptsRequest]) (*connect.Response[v1.ListReceiptsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("receiptapp.v1.ReceiptService.ListReceipts is not implemented"))
}

func (UnimplementedReceiptServiceHandler) GetReceiptDownloadURL(context.Context, *connect.Request[v1.GetReceiptDownloadURLRequest]) (*connect.Response[v1.GetReceiptDownloadURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("receiptapp.v1.ReceiptService.GetReceiptDownloadURL is not implemented"))
}
