/**
 * Generated by orval v6.11.1 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: 1.0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getCompileWorkflowMock = () => ({graph: {nodes: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.random.word(), predecessors: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.random.word())), complete: faker.datatype.boolean(), activated: faker.datatype.boolean(), label: faker.random.word()})), outcome: faker.random.word(), actions: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.random.word()))}})

export const getRunWorkflowMock = () => ({graph: {nodes: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.random.word(), predecessors: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.random.word())), complete: faker.datatype.boolean(), activated: faker.datatype.boolean(), label: faker.random.word()})), outcome: faker.random.word(), actions: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.random.word()))}})

export const getWorkflowMSW = () => [
rest.post('*/workflow/compile', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCompileWorkflowMock()),
        )
      }),rest.post('*/workflow/run', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getRunWorkflowMock()),
        )
      }),]
